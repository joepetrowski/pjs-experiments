"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.info = info;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _bn = _interopRequireDefault(require("bn.js"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _types = require("@polkadot/types");

var _util = require("@polkadot/util");

var _util2 = require("../util");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// groups the supplied chunks by era, i.e. { [era]: BN(total of values) }
function groupByEra(list) {
  return list.reduce((map, _ref) => {
    let {
      era,
      value
    } = _ref;
    const key = era.toString();
    map[key] = !map[key] ? value.unwrap() : map[key].add(value.unwrap());
    return map;
  }, {});
} // calculate the remaining blocks in a specific unlock era


function remainingBlocks(era, sessionInfo) {
  const remaining = era.sub(sessionInfo.currentEra); // on the Rust side the current-era >= era-for-unlock (removal done on >)

  return (0, _types.createType)('BlockNumber', remaining.gtn(0) ? remaining.subn(1).mul(sessionInfo.eraLength).add(sessionInfo.eraLength.sub(sessionInfo.eraProgress)) : 0);
}

function calculateUnlocking(stakingLedger, sessionInfo) {
  if ((0, _util.isUndefined)(stakingLedger)) {
    return undefined;
  }

  const unlockingChunks = stakingLedger.unlocking.filter((_ref2) => {
    let {
      era
    } = _ref2;
    return remainingBlocks(era.unwrap(), sessionInfo).gtn(0);
  });

  if (!unlockingChunks.length) {
    return undefined;
  } // group the unlock chunks that have the same era and sum their values


  const groupedResult = groupByEra(unlockingChunks);
  const results = Object.entries(groupedResult).map((_ref3) => {
    let [eraString, value] = _ref3;
    return {
      value: (0, _types.createType)('Balance', value),
      remainingBlocks: remainingBlocks(new _bn.default(eraString), sessionInfo)
    };
  });
  return results.length ? results : undefined;
}

function redeemableSum(stakingLedger, sessionInfo) {
  if ((0, _util.isUndefined)(stakingLedger)) {
    return (0, _types.createType)('Balance');
  }

  return (0, _types.createType)('Balance', stakingLedger.unlocking.reduce((total, _ref4) => {
    let {
      era,
      value
    } = _ref4;
    return remainingBlocks(era.unwrap(), sessionInfo).eqn(0) ? total.add(value.unwrap()) : total;
  }, new _bn.default(0)));
}

function unwrapSessionIds(stashId, queuedKeys, nextKeys) {
  // for 2.x we have a Vec<(ValidatorId,Keys)> of the keys
  if (Array.isArray(queuedKeys)) {
    const sessionIds = (queuedKeys.find((_ref5) => {
      let [currentId] = _ref5;
      return currentId.eq(stashId);
    }) || [undefined, []])[1];
    const nextSessionIds = nextKeys.unwrapOr([]);
    return {
      nextSessionIds,
      sessionIds
    };
  } // substrate 1.x


  const nextSessionIds = queuedKeys.isSome ? [queuedKeys.unwrap()] : [];
  return {
    nextSessionIds,
    sessionIds: nextSessionIds
  };
}

function parseResult(_ref6) {
  let {
    accountId,
    controllerId,
    stashId,
    sessionInfo,
    recentlyOffline = {},
    nextKeyFor = (0, _types.createType)('Option<AccountId>', null),
    queuedKeys,
    stakingLedger,
    nominators,
    rewardDestination,
    stakers,
    validatorPrefs,
    nextKeys = (0, _types.createType)('Option<Keys>', null)
  } = _ref6;

  const _stakingLedger = stakingLedger.unwrapOr(undefined);

  return _objectSpread({
    accountId,
    controllerId,
    nominators,
    offline: recentlyOffline[stashId.toString()],
    redeemable: redeemableSum(_stakingLedger, sessionInfo),
    rewardDestination,
    stakers,
    stakingLedger: _stakingLedger,
    stashId,
    unlocking: calculateUnlocking(_stakingLedger, sessionInfo),
    validatorPrefs
  }, unwrapSessionIds(stashId, queuedKeys || nextKeyFor, nextKeys));
}

function retrieveInfoV1(api, accountId, stashId, controllerId) {
  return (0, _rxjs.combineLatest)([api.derive.session.info(), api.derive.staking.recentlyOffline(), api.queryMulti([[api.query.session.nextKeyFor, controllerId], [api.query.staking.ledger, controllerId], [api.query.staking.nominators, stashId], [api.query.staking.payee, stashId], [api.query.staking.stakers, stashId], [api.query.staking.validators, stashId]])]).pipe((0, _operators.map)((_ref7) => {
    let [sessionInfo, recentlyOffline, [nextKeyFor, stakingLedger, [nominators], rewardDestination, stakers, [validatorPrefs]]] = _ref7;
    return parseResult({
      accountId,
      controllerId,
      stashId,
      sessionInfo,
      recentlyOffline,
      nextKeyFor,
      stakingLedger,
      nominators,
      rewardDestination,
      stakers,
      validatorPrefs
    });
  }));
}

function retrieveInfoV2(api, accountId, stashId, controllerId) {
  return (0, _rxjs.combineLatest)([api.derive.session.info(), api.query.session.queuedKeys(), api.queryMulti([[api.query.staking.nominators, stashId], [api.query.staking.payee, stashId], [api.query.staking.stakers, stashId], [api.query.staking.validators, stashId], [api.query.session.nextKeys, [api.consts.session.dedupKeyPrefix, stashId]], [api.query.staking.ledger, controllerId]])]).pipe((0, _operators.map)((_ref8) => {
    let [sessionInfo, queuedKeys, [_nominators, rewardDestination, stakers, [validatorPrefs], nextKeys, stakingLedger]] = _ref8;
    // if we have staking.storageVersion it indicates the new structure, unwrap as needed
    // FIXME We really want to be pulling all the new (valuable) info along
    const nominators = api.query.staking.storageVersion ? _nominators.isSome ? _nominators.unwrap()[0].targets : [] : _nominators[0];
    return parseResult({
      accountId,
      controllerId,
      stashId,
      sessionInfo,
      queuedKeys,
      stakingLedger,
      nominators,
      rewardDestination,
      stakers,
      validatorPrefs,
      nextKeys
    });
  }));
}

function retrieveV1(api, accountId) {
  // depending on where we come from, this may be a controller or stash
  return (0, _rxjs.combineLatest)([api.query.staking.bonded(accountId), api.query.staking.ledger(accountId)]).pipe((0, _operators.switchMap)((_ref9) => {
    let [bonded, stakingLedger] = _ref9;
    return stakingLedger.isSome ? retrieveInfoV1(api, accountId, stakingLedger.unwrap().stash, accountId) : bonded.isSome ? retrieveInfoV1(api, accountId, accountId, bonded.unwrap()) : (0, _rxjs.of)({
      accountId: accountId,
      nextSessionIds: [],
      sessionIds: []
    });
  }));
}

function retrieveV2(api, stashId) {
  return api.query.staking.bonded(stashId).pipe((0, _operators.switchMap)(controllerId => controllerId.isSome ? retrieveInfoV2(api, stashId, stashId, controllerId.unwrap()) : (0, _rxjs.of)({
    accountId: stashId,
    nextSessionIds: [],
    sessionIds: []
  })));
}
/**
 * @description From a stash, retrieve the controllerId and fill in all the relevant staking details
 */


function info(api) {
  const query = api.consts.session ? retrieveV2 : retrieveV1;
  return (0, _util2.memo)(accountId => query(api, (0, _types.createType)('AccountId', accountId)));
}